The main issue I see now is that the component uses two different state mechanisms for the modals:
It uses isPortfolioImpactOpen (and the related debouncedOpenPortfolioImpact) to control the opening of the calculator modal [source: 8718, 8732, 8891].
It uses modalState (and purchaseData) to control the display of the success modal after a purchase [source: 8732, 8732].
This mix is likely causing the problem. The state lifting needs to be fully implemented using only one mechanism (like modalState) to control which modal is visible ('closed', 'calculator', or 'success').
Animation Overlap: In handleDragEnd [source: 8729], when you swipe right, it triggers the debouncedOpenPortfolioImpact and starts the card's spring-back animation (cardControls.start(...) [source: 8733]) almost simultaneously. On iOS, animating the card back to its position while the modal overlay and the modal itself are trying to fade/scale in can lead to rendering glitches and the flicker you're seeing.
Debugging Ideas & Instructions for Replit Agent:

Let's refine the state lifting and address the animation overlap:

1. Unify State Management (Primary Fix):

Ensure modalState controls the calculator opening, removing the separate isPortfolioImpactOpen state and the debounce.

Plaintext

**Goal:** Use the `modalState` consistently for both opening and closing the calculator modal.

**File:** `client/src/components/ui/stock-card.tsx`

1.  **Remove State:** Delete the `isPortfolioImpactOpen` state variable and the `isDebouncing` state variable.
2.  **Remove Debounce:** Delete the `debouncedOpenPortfolioImpact` function [source: 8718].
3.  **Modify `handleDragEnd` [source: 8732]:**
    * Inside the `if (info.offset.x > threshold)` block (right swipe):
        * **Remove** the line `debouncedOpenPortfolioImpact();`.
        * **Add** the line `setModalState('calculator');` *before* the `cardControls.start({...})` call.
4.  **Modify Conditional Rendering:**
    * Find where `<PortfolioImpactCalculator ... />` is rendered [source: 8891].
    * Change the condition from `isPortfolioImpactOpen && (` to `modalState === 'calculator' && (`.
    * Ensure the `isOpen={true}` prop is still passed, or simplify by removing the `isOpen` prop entirely from `PortfolioImpactCalculator` if it's no longer needed internally (since its rendering is now controlled by the parent's `modalState`).

**File:** `client/src/components/ui/portfolio-impact-calculator.tsx`

1.  **(Optional but Recommended):** If you removed `isOpen` prop usage in the previous step, you can
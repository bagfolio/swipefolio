Overall Goal
The purpose of this system is to generate objective scores (from 0 to 100) for individual stocks across five key categories: Performance, Stability, Value, Momentum, and Potential. These category scores are then combined using specific weights to calculate an overall Swipefolio Score (also 0-100) for each stock.

Key Files Involved
client/src/lib/advanced-metric-scoring.ts: Contains the core calculation logic (the functions described below). This is the primary file for implementation.

client/src/lib/stock-data.ts: Defines the StockData structure and provides the input metrics for each stock (e.g., revenueGrowth, peRatio, beta, predictedPrice).

client/src/lib/industry-data.ts: Contains the industryAverages data structure. This MUST include average values for all relevant sub-metrics (Revenue Growth, P/E Ratio, Volatility, Predicted Upside, 1-Year Return, etc.) for each specific industry (e.g., "Tech", "ESG", "Real Estate"). It also contains the getIndustryAverages(industry) helper function.

client/src/lib/market-averages.ts: Contains the marketAverages data structure, providing the average values for the same sub-metrics across the entire market. It also contains the getDividendConsistencyScore helper.

client/src/contexts/portfolio-context.tsx: (Or wherever the final overall score is calculated) This file should use the category scores from getAdvancedMetricScore and apply the final weights to get the overall Swipefolio Score.

Core Concepts Explained
Comparison Basis: The system primarily scores a stock by comparing its specific metrics (e.g., Tesla's Revenue Growth) against the average for its Industry (e.g., ESG average Revenue Growth).

Market Context (Industry Strength Modifier): To add nuance, the system also looks at how the Industry Average compares to the Market Average for certain metrics. This generates an "Industry Strength Factor" (a value between 0.0 and 1.0, centered at 0.5). This factor slightly adjusts the stock's score:

If the industry is stronger than the market on a metric, the stock's score for that metric gets a small boost (multiplied by 1 + (Factor - 0.5) * 0.2).

If the industry is weaker than the market, the score gets a small reduction.

This modifier has a weight of 0.2 (20%).

Normalization (normalizeDifference function): This is the main function for scoring sub-metrics.

It calculates the difference between the stock's value and the industry average (StockValue - IndustryAvg).

It scales this difference using a specific SCALE_FACTOR (defined for each metric) to translate the difference into score points relative to a neutral score of 50. (e.g., if SCALE_FACTOR is 2.0, a difference of +10 units adds 20 points to the score).

It handles lowerIsBetter metrics (like P/E, Volatility) by inverting the difference's sign.

It handles missing or invalid input data by returning the NEUTRAL_SCORE (50).

Crucially, it works correctly with negative input values.

Capping (capScore function): All calculated scores (sub-metrics and final category scores) are capped strictly between 0 and 100.

Weights:

Sub-Metric Weights: Within each category (Performance, Value, etc.), the individual sub-metric scores are combined using specific weights (e.g., Performance = 50% Revenue Growth + 25% Profit Margin + 25% ROC).

Overall Score Weights: The five final category scores are combined using weights to get the overall Swipefolio Score (Performance 20%, Stability 15%, Value 15%, Momentum 20%, Potential 30%).

Category Score Calculations (Step-by-Step)
The main function getAdvancedMetricScore(stock, metricName) is called to get the score for a specific category. It retrieves the necessary stock metrics, industry averages, and market averages, then calls the appropriate calculation function below:

1. Performance Score (calculatePerformanceScore)

Goal: Measure operational success (growth & profitability).

Sub-Metrics & Weights:

Revenue Growth (50%) - Higher is better.

Profit Margin (25%) - Higher is better.

Return on Capital (ROC) (25%) - Higher is better.

Calculation:

For each sub-metric, calculate the score using normalizeDifference(StockValue, IndustryAvg, ScaleFactor).

For each sub-metric, calculate the IndustryStrengthFactor using calculateIndustryStrengthFactor(IndustryAvg, MarketAvg, ScaleFactor).

Combine using the weights and apply the Industry Strength modifier to each component: WeightedScore = Î£ [ Weight * (SubScore * (1 + (IndustryStrengthFactor - 0.5) * ModifierWeight)) ].

Return the capScore of the final WeightedScore.

Negative Handling: normalizeDifference handles negative growth, margins, or ROC correctly relative to the average.

2. Stability Score (calculateStabilityScore)

Goal: Measure price stability and dividend reliability.

Sub-Metrics & Weights:

Volatility (50%) - Lower is better.

Beta (30%) - Closer to 1.0 is considered "average" market risk.

Dividend Consistency (20%) - Based on qualitative rating.

Calculation:

Volatility: Calculate score using normalizeDifference(StockValue, IndustryAvg, ScaleFactor, true) (lower is better). Calculate IndustryStrengthFactor (lower is better) and apply modifier.

Beta: Calculate score directly: Score = max(0, 100 - (abs(1 - StockBeta) * 50)). This penalizes deviation from 1.0. (No Industry Strength modifier applied here).

Dividend Consistency: Get score (0-100) using getDividendConsistencyScore(StockRating). (No Industry Strength modifier applied here).

Combine using the weights: WeightedScore = (VolScoreComponent) + (BetaScore * 0.3) + (DivScore * 0.2).

Return the capScore of the final WeightedScore.

3. Value Score (calculateValueScore)

Goal: Measure valuation relative to fundamentals and future potential.

Sub-Metrics & Weights:

P/E Ratio (30%) - Lower is better.

P/B Ratio (20%) - Lower is better.

Dividend Yield (15%) - Higher is better.

Predicted Upside (35%) - Higher is better.

Calculation:

P/E & P/B: Calculate scores using normalizeDifference(StockValue, IndustryAvg, ScaleFactor, true). Add explicit checks: If Stock P/E or P/B is <= 0, assign a low score (e.g., 10). If Stock P/E/PB > 0 but Industry Avg <= 0, assign a high score (e.g., 85). Calculate IndustryStrengthFactor (lower is better) and apply modifier.

Dividend Yield: Calculate score using normalizeDifference(StockValue, IndustryAvg, ScaleFactor). If Stock Yield > 0 but Industry Avg <= 0, assign a high score (e.g., 85). If Stock Yield is 0, score is 0. Calculate IndustryStrengthFactor (higher is better) and apply modifier.

Predicted Upside:

Calculate % Upside = ((PredictedPrice - CurrentPrice) / CurrentPrice) * 100. Handle missing/invalid predictedPrice.

Calculate score using normalizeDifference(% Upside, IndustryAvgUpside, ScaleFactor).

Calculate IndustryStrengthFactor (higher is better) and apply modifier.

Combine using the weights and apply the Industry Strength modifier to each component.

Return the capScore of the final WeightedScore.

4. Momentum Score (calculateMomentumScore)

Goal: Measure recent price trend and strength.

Sub-Metrics & Weights:

1-Year Return (40%) - Higher is better.

Relative Performance vs Index (30%) - Higher is better.

3-Month Return (15%) - Higher is better.

RSI (15%) - Closer to 50 is better.

Calculation:

1Y Return, Relative Perf, 3M Return: Calculate scores using normalizeDifference(StockValue, IndustryAvg, ScaleFactor). Calculate IndustryStrengthFactor (higher is better) and apply modifier. Handle parsing of percentage strings for returns.

RSI: Calculate score directly: Score = max(0, 100 - (abs(50 - StockRSI) * 2)). (No Industry Strength modifier applied here).

Combine using the weights and apply the Industry Strength modifier to the return/relative performance components.

Return the capScore of the final WeightedScore.

5. Potential Score (calculatePotentialScore)

Goal: Capture forward-looking growth prospects.

Sub-Metrics & Weights:

Analyst Target Upside (Predicted Upside) (50%) - Higher is better.

Revenue Growth Score (from Performance calc) (30%) - Higher is better.

Relative Momentum Score (Relative Performance vs Index from Momentum calc) (20%) - Higher is better.

Calculation:

Upside: Calculate % Upside as in Value score. Calculate score using normalizeDifference(% Upside, 0, ScaleFactor). (Compared to 0% baseline, not industry average here, to reflect absolute potential).

Rev Growth & Rel Mom: Reuse the scores (0-100) calculated within the Performance and Momentum functions for consistency.

Combine using the weights: WeightedScore = (UpsideScore * 0.5) + (RevGrowthScore * 0.3) + (RelativeMomentumScore * 0.2).

Return the capScore of the final WeightedScore.

Overall Swipefolio Score Calculation
Function: calculateOverallSwipefolioScore(stock) or calculateOverallPortfolioScore(holdings).

Method: Calculates the five category scores (Performance, Stability, Value, Momentum, Potential) for the stock(s) using getAdvancedMetricScore.

Weights: Combines the five scores using the final weights:

Performance: 20%

Stability: 15%

Value: 15%

Momentum: 20%

Potential: 30%

Result: Returns a single, capped (0-100) overall score.

Data Requirements Check
Ensure industry-data.ts contains accurate averages for all sub-metrics (including predictedUpside and oneYearReturn) for every industry defined in stock-data.ts.

Ensure market-averages.ts contains accurate averages for all sub-metrics (including predictedUpside and oneYearReturn).

Ensure stock-data.ts contains the necessary input metrics (predictedPrice, oneYearReturn, etc.) for all stocks.

This detailed breakdown covers the entire v4 system logic. Implementing this precisely in advanced-metric-scoring.ts and ensuring the average data is correct should provide the robust, nuanced scoring you're aiming for.
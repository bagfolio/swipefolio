Analysis:

Correct Calculation of Individual Metrics: The code correctly calculates the performance, stability, value, and momentum scores for the portfolio based on the current holdings using the calculatePortfolioMetric function (which relies on calculatePortfolioScore from advanced-metric-scoring.ts) [source: 2458, 2460]. This part seems fine.
Incorrect Quality Score Calculation: The problem lies here:
TypeScript

const portfolioMetrics = {
  performance: calculatePortfolioMetric('performance'),
  stability: calculatePortfolioMetric('stability'),
  value: calculatePortfolioMetric('value'),
  momentum: calculatePortfolioMetric('momentum'),
  // Problem is here:
  qualityScore: calculateQualityScore() // Calls the function below
};
  
  // Calculate quality score using equal weighting of all metrics
  function calculateQualityScore(): number {
    if (holdings.length === 0) return 0; // Empty portfolio starts at 0
    
    // It uses an IMPORTED calculation function, NOT the values above
    return calculatePortfolioQuality(holdings); // Imported from @/data/leaderboard-data
  }
Instead of calculating the qualityScore as a simple 25% average of the performance, stability, value, and momentum scores already calculated within the context, it calls a separate function calculateQualityScore, which in turn calls calculatePortfolioQuality(holdings) imported from @/data/leaderboard-data.ts [source: 2444, 2458].
External Logic Issue: This external calculatePortfolioQuality function (from @/data/leaderboard-data.ts) likely contains different or incorrect logic. As identified previously, @/data/leaderboard-data.ts seems to be a source of static or potentially outdated logic, disconnected from the live portfolio state managed by this context. This is why the quality score isn't reflecting the real-time portfolio composition according to your desired 25/25/25/25 weighting.
Instructions for Replit Agent:

To fix the Portfolio Quality score calculation so it updates correctly based on the live portfolio metrics with equal weighting:

Navigate to client/src/contexts/portfolio-context.tsx.

Remove Unnecessary Imports: Delete the following import line near the top of the file, as it's causing the incorrect calculation:

TypeScript

import { calculatePortfolioQuality, getQualityScoreColor, getQualityScoreBgColor } from '@/data/leaderboard-data';
Modify portfolioMetrics Calculation:

Find the portfolioMetrics object definition [source: 2458].
Change the line for qualityScore to directly calculate the average of the other four metrics calculated just above it.
Ensure it correctly handles the case where the portfolio is empty (holdings.length === 0).
Replace this:

TypeScript

 // Portfolio metrics
  const portfolioMetrics = {
    performance: calculatePortfolioMetric('performance'),
    stability: calculatePortfolioMetric('stability'),
    value: calculatePortfolioMetric('value'),
    momentum: calculatePortfolioMetric('momentum'),
    qualityScore: calculateQualityScore() // Calls the function below
  };
  
  // Calculate quality score using equal weighting of all metrics
  function calculateQualityScore(): number {
    if (holdings.length === 0) return 0; // Empty portfolio starts at 0
    
    // Use the imported calculation function
    return calculatePortfolioQuality(holdings);
  }
With this:

TypeScript

 // Calculate individual metrics first
  const performanceScore = calculatePortfolioMetric('performance');
  const stabilityScore = calculatePortfolioMetric('stability');
  const valueScore = calculatePortfolioMetric('value');
  const momentumScore = calculatePortfolioMetric('momentum');

  // Calculate Quality Score as the average of the four metrics
  const qualityScore = holdings.length === 0 
                       ? 0 
                       : Math.round((performanceScore + stabilityScore + valueScore + momentumScore) / 4);

  // Portfolio metrics object now uses the calculated scores
  const portfolioMetrics = {
    performance: performanceScore,
    stability: stabilityScore,
    value: valueScore,
    momentum: momentumScore,
    qualityScore: qualityScore // Use the directly calculated average
  };

  // Delete the separate calculateQualityScore function if it's no longer needed elsewhere
Update calculateImpact Function:

Inside the calculateImpact function within the same file, find where currentMetrics and newMetrics are defined [source: 2509, 2520].
Ensure the qualityScore within these objects is also calculated using the 25% average method based on the other metrics within that specific object (current or new), rather than potentially calling the old external function.
Example modification within calculateImpact:

TypeScript

  // Inside calculateImpact...

  // Current metrics... (ensure qualityScore is calculated correctly here too if needed)
  const currentMetrics = { /* ... other metrics ... */ };
  currentMetrics.qualityScore = hasExistingHoldings 
                                 ? Math.round((currentMetrics.performance + currentMetrics.stability + currentMetrics.value + currentMetrics.momentum) / 4)
                                 : 0;
  console.log('Current portfolio metrics (incl. Quality):', currentMetrics);


  // New metrics...
  // ... (calculate newPerformance, newStability, newValue, newMomentum as before) ...
   const newQualityScore = simulatedHoldings.length === 0
                          ? 0
                          : Math.round((newPerformance + newStability + newValue + newMomentum) / 4);

  console.log(`- Quality Score: ${newQualityScore}`);

  const newMetrics = {
      performance: newPerformance,
      stability: newStability,
      value: newValue,
      momentum: newMomentum,
      qualityScore: newQualityScore // Use the new average
  };

  // ... rest of calculateImpact function ...

  // Recalculate impact using the correct newQualityScore
  const qualityScoreImpact = parseFloat((newMetrics.qualityScore - currentMetrics.qualityScore).toFixed(1));

  console.log(`- Quality Score: ${currentMetrics.qualityScore} → <span class="math-inline">\{newMetrics\.qualityScore\} \(</span>{qualityScoreImpact > 0 ? '+' : ''}${qualityScoreImpact})`);

  const impact = {
      performance: performanceImpact,
      stability: stabilityImpact,
      value: valueImpact,
      momentum: momentumImpact,
      qualityScore: qualityScoreImpact // Ensure this uses the recalculated impact
  };

  // ... return statement ...
This change ensures the qualityScore in the context is derived directly and correctly from the other four primary portfolio metrics using the specified 25% weighting for each, and it will update whenever the underlying holdings change, reflecting the live state accurately.
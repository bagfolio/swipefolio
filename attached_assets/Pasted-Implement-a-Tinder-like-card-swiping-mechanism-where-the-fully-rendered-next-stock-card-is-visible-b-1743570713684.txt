Implement a Tinder-like card swiping mechanism where the fully rendered next stock card is visible behind the current card during the swipe animation.

Analysis: The current implementation renders only one StockCard and shows a simplified preview of the next stock's data behind it. We need to change this to render two separate instances of the StockCard component: one for the current stock (top) and one for the next stock (bottom, initially styled to appear behind).

Steps:

Modify client/src/pages/stock-detail-page.tsx:

Render Two Cards: Instead of rendering a single <StockCard> and passing nextStock as a prop for internal preview, conditionally render two <StockCard> components.
One for currentStock.
One for nextStock (only if nextStock exists).
Pass Props: Each <StockCard> instance should receive its corresponding stock data (currentStock or nextStock). They will also need necessary props like displayMode, potentially currentIndex/totalCount if used for display within the card, but not onNext/onPrevious for the background card initially. The onNext/onPrevious handlers and swipe gestures should only be active on the top card.
Keys: Ensure each rendered <StockCard> has a unique key prop (e.g., key={currentStock.symbol} or key={currentStockIndex}) to help React manage the instances correctly during transitions.
Container: Wrap these two cards in a relative container to manage absolute positioning.
Update Styling and Positioning (stock-detail-page.tsx or associated CSS):

Stacking: Use position: absolute for both cards within their relative container.
Top Card: Give the currentStock card a higher z-index (e.g., z-10).
Bottom Card:
Give the nextStock card a lower z-index (e.g., z-0).
Apply initial transform styles to scale it down and move it slightly down (e.g., transform: 'scale(0.92) translateY(20px)').
Crucially, remove the filter: 'blur(...)' and excessive opacity applied in the previous attempt if you want the full card visible, perhaps just a slight opacity reduction (e.g., opacity: 0.9 or 1).
Refactor client/src/components/ui/stock-card.tsx:

Remove Internal Preview Logic: Delete the entire block of code that conditionally renders the simplified nextStock preview (the div with z-0 inside stock-card.tsx). This component should now only be responsible for rendering the single stock passed via props.
Simplify Props: Remove the nextStock prop from StockCard's prop types and usage, as it's no longer needed there.
Swipe Gesture Target: Ensure the swipe gesture detection (likely using framer-motion's drag prop or similar) is attached to the main wrapper of the StockCard component itself. This gesture should only be enabled for the top card instance rendered in the parent.
Implement Coordinated Animation (using framer-motion or similar):

In stock-detail-page.tsx: Use AnimatePresence from framer-motion around the card rendering logic if not already used. This helps manage entering/exiting components.
In stock-card.tsx (or controlled from the parent):
Define animation variants for the card states: center, exitLeft, exitRight, enter.
The top card's drag gesture (onDragEnd) should determine the exit direction (exitLeft/exitRight). When an exit animation completes, trigger the handleNextStock or handlePreviousStock callback.
When the state updates in stock-detail-page.tsx (due to handleNextStock/handlePreviousStock), the currentStock card should animate out, and the nextStock card (which becomes the new currentStock) should animate from its background position/style (scale(0.92), translateY(20px)) to the center position/style (scale(1), translateY(0)). The new nextStock card will appear in the background position.
Styling Synchronization: The animation needs to smoothly transition the transform and opacity properties.
State Management (stock-detail-page.tsx):

The existing logic using currentStockIndex, handleNextStock, handlePreviousStock should mostly work. The key difference is that updating the index will now swap the stock props passed to the two rendered <StockCard> instances, triggering the animations managed by framer-motion or your chosen library.
Address Potential Conflicts (CSS/z-index):

Remember the previous popup issue. Carefully manage z-index values for the cards, swipe container, and any popups/modals to ensure they layer correctly during and after animations. The main swipe container might need a specific z-index itself.
Example Snippet (Conceptual - for stock-detail-page.tsx):

TypeScript

// client/src/pages/stock-detail-page.tsx (Conceptual Example)
import { StockCard } from '@/components/ui/stock-card';
import { AnimatePresence } from 'framer-motion'; // Assuming framer-motion

// ... other imports and component logic ...

const StockDetailPage = () => {
  // ... existing state: currentStockIndex, stocks, handleNextStock, etc.
  const currentStock = stocks[currentStockIndex];
  const nextStock = stocks[currentStockIndex + 1]; // Or logic for looping/end

  // Define animation logic/variants here or pass them to StockCard

  return (
    <div className="relative h-screen w-screen flex items-center justify-center overflow-hidden">
      {/* Container for stacking */}
      <div className="relative w-[90%] h-[80%] max-w-md">
        <AnimatePresence initial={false}>
          {/* Render Next Card (Background) - Fully Rendered */}
          {nextStock && (
            <StockCard
              key={currentStockIndex + 1} // Unique key for the next card
              stock={nextStock}
              displayMode={useRealTimeData ? 'realtime' : 'simple'}
              isBackground={true} // Custom prop to apply background styles/disable interaction
              // NO onNext/onPrevious here
              // Add animation props for its background state
              // Use absolute positioning, lower z-index, scale/translate transforms
              className="absolute inset-0 z-0" // Example styling
              style={{ /* transform: 'scale(0.92) translateY(20px)', opacity: 0.9 */ }}
              // Ensure this instance DOES NOT have drag handlers active
            />
          )}

          {/* Render Current Card (Foreground) - Fully Rendered */}
          {currentStock && (
            <StockCard
              key={currentStockIndex} // Unique key for the current card
              stock={currentStock}
              onNext={handleNextStock}
              onPrevious={handlePreviousStock}
              currentIndex={currentStockIndex}
              totalCount={stocks.length}
              displayMode={useRealTimeData ? 'realtime' : 'simple'}
              isBackground={false} // Prop to enable interaction/foreground styles
              // Add animation props for drag, exit, and center states
              // Use absolute positioning, higher z-index
               className="absolute inset-0 z-10" // Example styling
               // Ensure this instance DOES have drag handlers active
            />
          )}
        </AnimatePresence>
      </div>
      {/* Other UI elements like buttons, progress bar */}
       {/* Your Congratulations Popup - Ensure z-index is higher than cards */}
    </div>
  );
};
 I can definitely help analyze why the PortfolioImpactCalculator might be flickering or doing a "double load" animation, especially on iOS. This kind of behavior often stems from conflicting state updates or animations happening close together.

Based on the codebase structure and the components involved, here are the most likely reasons for the flickering:

Rapid State Changes & Conflicting Animations:

When you confirm an investment in the PortfolioImpactCalculator, multiple things happen quickly:
The handleInvest function is called.   
buyStock is initiated, possibly setting an isLoading state in the PortfolioContext.   
The calculator's internal state showSuccessModal is set to true.   
An effect inside the calculator tries to hide the calculator element when showSuccessModal becomes true.   
The PurchaseSuccessModal starts its entry animation.   
The parent component (StockCard?) might be trying to close the calculator by setting its main isOpen prop (likely tied to isPortfolioImpactOpen state ) to false, triggering the calculator's main exit animation via AnimatePresence.   
This rapid sequence—especially the attempt to hide the calculator via direct style manipulation while AnimatePresence might also be trying to animate its exit—can lead to conflicting instructions and visual glitches like flickering or restarting animations.
AnimatePresence and Component Lifecycle:

AnimatePresence manages the mounting and unmounting animations. If the isOpen prop controlling the calculator's presence changes at slightly the wrong time relative to the showSuccessModal state change inside it, AnimatePresence might start animating the calculator out, then get interrupted or confused by other state updates (like isLoading), causing it to flicker back before the success modal fully takes over. The mode="wait"  on the success modal's AnimatePresence is good, but the calculator's exit needs to be clean.   
Interaction with Context Loading State:

The buyStock function sets isLoading to true  and then false  in the PortfolioContext. These context updates trigger re-renders in components consuming the context, potentially including the StockCard or PortfolioImpactCalculator itself. A re-render during an animation can sometimes cause the animation to stutter or restart.   
Recommendations:

Simplify Visibility Control: Rely solely on the isOpen prop (managed by the parent component like StockCard) and AnimatePresence  to handle the calculator's appearance and disappearance. Remove the useEffect hook within PortfolioImpactCalculator that directly tries to hide the modal when showSuccessModal is true. Let the parent component control when the calculator should be unmounted/animated out.   
Coordinate State Updates: Ensure the parent component (StockCard) only sets the state to close the calculator (isPortfolioImpactOpen = false) after the investment logic is fully complete and the success modal is ready to be displayed (or even after the success modal is closed, depending on the desired UX). Avoid changing the calculator's main isOpen prop simultaneously with internal state changes that trigger other modals.
Review onInvest Prop: Check how the onInvest prop  passed to the PortfolioImpactCalculator is used in the parent (StockCard). Ensure it doesn't prematurely trigger the closing of the calculator. It seems onInvest currently calls onNext, which might be fine, but ensure no other logic tied to onInvest is conflicting.   
By centralizing the control of the calculator's visibility in the parent component and removing potentially conflicting internal effects or rapid state changes, you should be able to achieve a smoother transition without the flickering.
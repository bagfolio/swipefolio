 You want the swiping experience to feel more like Tinder or other card-stack apps, where the next card is visible underneath the current card as you swipe, instead of revealing the page background.

The current problem is likely that only one StockCard component is being rendered at a time in the StockDetailPage. When you drag the card, it moves, and if it becomes transparent or moves fully off-screen, you see whatever is behind the card's container – in this case, the page background (which you described as black, likely from the bg-black on the parent div in StockDetailPage ).   

Here’s how to achieve the stacked card effect:

1. Render Multiple Cards in StockDetailPage:

The key is to render both the current card and the next card in the stack simultaneously within StockDetailPage.tsx. The next card should be positioned behind the current card using CSS.

Modify the main content area in StockDetailPage.tsx to render two StockCard instances within a relative container.
Use absolute positioning and z-index to stack them.
Apply a slight scale-down and vertical offset to the card behind (zIndex: 1) so it's visible below the top card (zIndex: 2).
TypeScript

// Inside StockDetailPage component's return statement

<div className="flex-1 relative flex items-center justify-center p-4"> {/* Container for stacking */}

  {/* Render Next Card (if one exists) - Positioned behind */}
  {currentStockIndex + 1 < stocks.length && (
    <motion.div
      key={stocks[currentStockIndex + 1].ticker} // Use a stable key
      className="absolute w-[90%] max-w-md h-[85%]" // Adjust size to match StockCard
      style={{ zIndex: 1 }}
      initial={{ scale: 0.95, y: 10, opacity: 0.9 }} // Start slightly smaller and lower
      animate={{ scale: 0.95, y: 10, opacity: 0.9 }} // Keep it behind
      transition={{ type: "spring", stiffness: 400, damping: 30 }}
    >
      {/* Render the actual next StockCard, make it non-interactive */}
      <div style={{ pointerEvents: 'none' }}>
          <StockCard
            stock={stocks[currentStockIndex + 1]}
            onNext={() => {}} // Dummy prop
            onPrevious={() => {}} // Dummy prop
            currentIndex={currentStockIndex + 1}
            totalCount={stocks.length}
            displayMode={useRealTimeData ? 'realtime' : 'simple'}
          />
      </div>
    </motion.div>
  )}

  {/* Render Current Card - Positioned on top */}
  {currentStock && (
     <motion.div
       key={currentStock.ticker} // Use a stable key
       className="absolute w-[90%] max-w-md h-[85%]" // Adjust size to match StockCard
       style={{ zIndex: 2 }}
       // Consider adding layout prop if needed for smooth transitions on index change
       // layout
     >
      {/* This is the interactive card that uses framer-motion for dragging */}
      <StockCard
        stock={currentStock}
        onNext={handleNextStock}
        onPrevious={handlePreviousStock}
        currentIndex={currentStockIndex}
        totalCount={stocks.length}
        // Remove the 'nextStock' prop from StockCard if it was previously used for previews
        displayMode={useRealTimeData ? 'realtime' : 'simple'}
      />
     </motion.div>
  )}
</div>
2. Update StockCard Component:

Remove Internal Preview: Since StockDetailPage now renders the actual next card behind, you should remove any code within StockCard.tsx that was trying to simulate or show a blurred preview of the next card (like the div with blur-xl mentioned in the code analysis ).   
Ensure Opaque Background: Double-check that the main container div within StockCard has an opaque background color (like bg-white or the gradient used ) so you don't see through it.   
3. Smooth Transitions (Optional but Recommended):

When currentStockIndex changes after a swipe, the card that was behind will become the new top card. To make this transition smooth (scaling up and moving into place), you might want to explore:
Framer Motion layout prop: Adding the layout prop to the motion.div wrapping each StockCard in StockDetailPage can help Framer Motion automatically animate layout changes.
Framer Motion AnimatePresence: Wrap the mapping/rendering of cards in AnimatePresence if cards need distinct enter/exit animations.
By rendering the next card physically behind the current one, you'll achieve the desired visual effect where swiping the top card reveals the one underneath, creating a much smoother and more intuitive experience.
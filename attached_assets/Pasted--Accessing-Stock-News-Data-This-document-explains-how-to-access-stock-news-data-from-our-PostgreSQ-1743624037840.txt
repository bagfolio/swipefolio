# Accessing Stock News Data

This document explains how to access stock news data from our PostgreSQL database through the API endpoints.

## API Endpoints

The stock data API provides the following endpoint for news:

```
GET /api/pg/stock/{ticker}/news
```

### Parameters:
- `ticker`: Stock ticker symbol (e.g., PLD, AAPL, MSFT)

### Example Request:
```
GET /api/pg/stock/PLD/news
```

### Response Format:
The API returns data in a columnar format, which means all values for a given field are stored in arrays. This significantly reduces the size of the response compared to traditional object arrays.

```json
{
  "success": true,
  "data": {
    "title": ["Article 1 Title", "Article 2 Title", ...],
    "publisher": ["Publisher 1", "Publisher 2", ...],
    "publishDate": ["2025-04-02", "2025-03-31", ...],
    "url": ["https://example.com/article1", "https://example.com/article2", ...],
    "summary": ["Summary of article 1", "Summary of article 2", ...],
    "contentType": ["STORY", "STORY", ...],
    "id": ["id1", "id2", ...]
  }
}
```

### Accessing Data:
Each array in the response contains values for all news articles, with the index position linking related items across arrays. For example, `data.title[0]` corresponds to `data.publisher[0]` and `data.url[0]` for the first news article.

## Client Code Examples

### Python Example:

```python
import requests

def fetch_stock_news(ticker):
    url = f"https://your-domain.com/api/pg/stock/{ticker}/news"
    response = requests.get(url)
    
    if response.status_code == 200:
        data = response.json()
        if data.get('success'):
            return data.get('data')
    
    return None

# Example usage
news = fetch_stock_news("PLD")
if news and 'title' in news:
    for i in range(len(news['title'])):
        print(f"Title: {news['title'][i]}")
        print(f"Published: {news['publishDate'][i]} by {news['publisher'][i]}")
        print(f"Link: {news['url'][i]}")
        print("---")
```

### JavaScript Example:

```javascript
async function fetchStockNews(ticker) {
  try {
    const response = await fetch(`https://your-domain.com/api/pg/stock/${ticker}/news`);
    const data = await response.json();
    
    if (data.success) {
      return data.data;
    } else {
      console.error('Error fetching news:', data.error);
      return null;
    }
  } catch (error) {
    console.error('Failed to fetch news:', error);
    return null;
  }
}

// Example usage
fetchStockNews('PLD').then(news => {
  if (news && news.title) {
    for (let i = 0; i < news.title.length; i++) {
      console.log(`Title: ${news.title[i]}`);
      console.log(`Published: ${news.publishDate[i]} by ${news.publisher[i]}`);
      console.log(`Link: ${news.url[i]}`);
      console.log('---');
    }
  }
});
```

## Database Structure

In the PostgreSQL database, news data is stored in the `stock_data` table in a JSONB column named `news`. The news data uses the same columnar format as the API response.

### Example SQL Query:

```sql
-- Get news titles for a specific stock
SELECT 
  ticker,
  jsonb_array_elements_text(news->'title') as title
FROM stock_data 
WHERE ticker = 'PLD';

-- Count the number of news articles for each stock
SELECT 
  ticker,
  jsonb_array_length(news->'title') as news_count
FROM stock_data;
```

## Columnar Format Benefits

The columnar format provides several advantages:

1. **Reduced Response Size**: Eliminates repetition of field names for each record
2. **Faster Processing**: Arrays can be processed more efficiently than object arrays
3. **Simpler Access Patterns**: Consistent indexing across related fields
4. **Better Compression**: Similar values grouped together compress better

## Updating Schedule

News data is updated according to the following schedule:

- Full stock data update: Twice daily (morning and evening)
- News-only update: Every 4 hours

## Troubleshooting

If you encounter issues accessing news data:

1. **Empty News Array**: Some stocks may not have recent news. Check if the arrays exist but are empty.
2. **Missing News Data**: Some mutual funds or certain tickers may not have news data at all. 
3. **Rate Limiting**: Ensure you're not making too many requests in a short period.
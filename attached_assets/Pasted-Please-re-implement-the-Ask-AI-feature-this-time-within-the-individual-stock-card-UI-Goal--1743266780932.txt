Please re-implement the "Ask AI" feature, this time within the individual stock card UI.

**Goal:**
1.  Modify the `OverallAnalysisCard` component (`client/src/components/overall-analysis-card.tsx`) to replace the static "Key Insights" list with an interactive "Ask AI about this stock" section.
2.  This new section should allow users to type a question about the *current stock* being displayed in the card and receive an educational, AI-generated response.
3.  The feature should reuse the existing, working backend endpoint `/api/ai/ask-stock` (ensure it's active in `server/routes.ts`) which uses the OpenRouter API key (`OPENROUTER_API_KEY` from Secrets) and the `google/gemini-flash-1.5` model.
4.  The AI's responses must answer the users question directly, be helpful, brief. It should remember that its talking to non-fincally literate gen z users. although this does not mean it will speak super casual lingo, this means that it will put in the extra effort to communicate relevant/pertinent information especially about stock statistics and other data in ways that are easy to understand and digest. it should also try to limit its resposnes to 2-3 sentences (just to be shorter side).

**Implementation Steps:**

**1. Modify `client/src/components/overall-analysis-card.tsx`:**

* **Accept Full Stock Prop:** If not already done, modify the `OverallAnalysisCardProps` interface and the component to accept the full `stock: StockData` object as a prop, instead of just individual fields like `ticker`, `name`, etc. This ensures all necessary context is available for the AI prompt. Update the parent component (`StockCard.tsx`) to pass the full `stock` object to `<OverallAnalysisCard />`.
* **Remove Key Insights:** Delete the section that maps over `analysis.keyInsights` and renders the list items[cite: 2463]. Keep the "Overall Analysis" title and rating section above it.
* **Add AI Section UI:** In the place where the "Key Insights" list was, add the following UI elements (using ShadCN components):
    * A `Textarea` for user input, placeholder text like `Ask about ${stock.ticker}...`
    * A "Send" `Button` with an icon (e.g., `Send` or `Sparkles` from `lucide-react`).
    * A loading indicator (`Loader2`) to display on the button while waiting.
    * A `div` to display the `aiResponse` text.
    * A `div` to display any `errorAI` text.
    * The disclaimer: "AI responses are for educational purposes only and are not financial advice."
    * **Styling:** Ensure the `Textarea` has a visible text color class (e.g., `text-slate-900` or `text-black`). Style the response/error areas appropriately.
* **Add State Management:** Add `useState` hooks within the `OverallAnalysisCard` component for:
    * `userQuestion` (string)
    * `aiResponse` (string)
    * `isLoadingAI` (boolean)
    * `errorAI` (string | null)
* **Add Event Handling & API Logic:**
    * Implement an `async` function `handleSendStockQuestion`.
    * Attach this function to the `onClick` of the "Send" button.
    * Inside `handleSendStockQuestion`:
        * Set `isLoadingAI` to true; clear `aiResponse` and `errorAI`.
        * Check if `userQuestion` is empty/whitespace; return if it is.
        * Construct the `stockContext` object using the `stock` prop (include `ticker`, `name`, `description`, `price`, `metrics`, `industry`, etc. - similar to how it was done in the deleted `AskAI.tsx`).
        * Use `Workspace` to make a `POST` request to `/api/ai/ask-stock`.
        * Send `{ userQuestion, stockContext }` in the JSON body.
        * Use a `try...catch...finally` block:
            * In `try`: Check `response.ok`, parse JSON (`data.answer`), update `aiResponse`. Handle errors from the backend response.
            * In `catch`: Update `errorAI`.
            * In `finally`: Set `isLoadingAI` to `false`.
* **Button Disabled State:** Ensure the "Send" button's `disabled` prop is set correctly based on `isLoadingAI` and whether `userQuestion` is empty (`disabled={isLoadingAI || !userQuestion.trim()}`).

**2. Verify Backend (`server/routes.ts`):**

* Ensure the `app.post("/api/ai/ask-stock", ...)` route handler is present, uncommented, and functional.
* Confirm the system prompt used within this route still enforces the "educational only, no financial advice" rule specifically for analyzing individual stocks.
* Confirm it correctly reads the `OPENROUTER_API_KEY` from Secrets.

**3. Potential Interaction Issues:**

* Remind the agent that placing interactive elements (like textareas and buttons) inside a draggable component (`StockCard`) can sometimes lead to event conflicts, especially on mobile. If the button is unresponsive after implementation, the primary suspect is conflicting event handlers (like `stopPropagation` if added, or interference from the parent drag handlers). Test carefully on mobile.

This approach re-integrates the AI feature directly into the relevant analysis section of the stock card, reusing the backend logic that was previously confirmed to work with the OpenRouter API documentation.
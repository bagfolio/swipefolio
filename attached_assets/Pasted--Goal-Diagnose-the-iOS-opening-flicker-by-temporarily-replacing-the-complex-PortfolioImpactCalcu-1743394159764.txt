**Goal:** Diagnose the iOS opening flicker by temporarily replacing the complex PortfolioImpactCalculator with a minimal animated placeholder div to see if the flicker still occurs.

**File:** `client/src/components/ui/stock-card.tsx`

1.  **Locate Modal Rendering:** Find the block where `<PortfolioImpactCalculator />` is conditionally rendered based on `modalState === 'calculator'`.
2.  **Temporarily Replace:** Comment out the entire `<PortfolioImpactCalculator ... />` component instance.
3.  **Add Simple Placeholder:** In its place (still within the `modalState === 'calculator'` condition and inside the `<AnimatePresence>` if you added it), add a basic `motion.div` with the *exact same* animation props and the *same* core CSS class (`calculator-modal`) as the original calculator modal uses for positioning. Add some basic inline styles for visibility.

    **Replace the existing calculator rendering block with something like this:**

    ```typescript
    {modalState === 'calculator' && (
      <>
        {/* Keep the original Backdrop */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.2, ease: 'easeInOut' }}
          className="calculator-overlay"
          onClick={() => setModalState('closed')} // Simple close
        />

        {/* --- TEMPORARY SIMPLE TEST MODAL --- */}
        <motion.div
          key="simple-test-modal-key" // Important: Use a unique key
          initial={{ opacity: 0, scale: 0.92, y: 30 }} // Use original calculator animation props
          animate={{ opacity: 1, scale: 1, y: 0, transition: { duration: 0.3, ease: 'easeInOut' } }}
          exit={{ opacity: 0, scale: 0.95, y: 20, transition: { duration: 0.2, ease: 'easeInOut' } }}
          className="calculator-modal" // CRITICAL: Use the same positioning class
          style={{ // Basic visible styling
            width: '80%',
            maxWidth: '400px',
            height: '50vh',
            background: 'linear-gradient(to bottom right, lightblue, lightcoral)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '20px',
            fontWeight: 'bold',
            color: 'black',
            boxShadow: '0 20px 60px -15px rgba(0, 0, 0, 0.25), 0 12px 25px -10px rgba(0, 0, 0, 0.1)'
          }}
          onClick={() => setModalState('closed')} // Simple close on click
        >
          Simple Test - Does this flicker?
        </motion.div>
      </>
    )}
    ```
    *(Make sure the original `<PurchaseSuccessModal .../>` rendering based on `modalState === 'success'` is still present after this block).*

**Next Steps:**

1.  **Ask the agent to apply the change above.**
2.  **Test Thoroughly on iOS:** Trigger the opening using *both* the swipe-right gesture *and* the hidden "Buy" button (if accessible for testing).
3.  **Report Back:**
    * **Did the simple blue/coral test modal *also* flicker/bounce on opening?**
    * **Or did the simple test modal appear smoothly without flickering?**

Knowing the result of this test is crucial. It will tell us whether the problem lies deep within the animation/rendering process on iOS itself, or if it's related to the internal complexity of your actual `PortfolioImpactCalculator` component.
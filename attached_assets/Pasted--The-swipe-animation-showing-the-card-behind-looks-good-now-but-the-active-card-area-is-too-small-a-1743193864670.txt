 The swipe animation showing the card behind looks good now, but the active card area is too small and centered, preventing you from seeing all the content and scrolling within it.

This happened because the instructions to make the cards stack correctly involved setting explicit percentage-based widths and heights (w-[90%], h-[85%]) on the card wrappers in StockDetailPage.tsx. While that helped position the stack, it also constrained the size of the StockCard component itself.

How to Fix:

We need to adjust the layout in StockDetailPage.tsx again:

Allow the main container to define the full area: Remove the centering styles (items-center, justify-center) and the outer padding (p-4) from the main div holding the cards.
Make the card wrappers fill this container: Change the motion.div wrappers for the current and next cards to fill the container (inset-0) and then apply padding inside these wrappers to give the cards margins.
Instructions for the Agent:

Please modify the file client/src/pages/stock-detail-page.tsx.

Update the Main Content Container:

Find the div that wraps the <AnimatePresence> component.
Change its className from "flex-1 relative flex items-center justify-center p-4 overflow-hidden"
To: "flex-1 relative overflow-hidden"
Update Both Card Wrapper motion.divs:

Find the two motion.div components inside <AnimatePresence> (one for the next card, one for the current card).
For both of these motion.divs, change their className from "absolute w-[90%] max-w-md h-[85%]"
To: "absolute inset-0 p-4" (You can adjust the p-4 later if you want different margins around the card).
Code Snippet for StockDetailPage.tsx (Showing the changes):

TypeScript

// Inside StockDetailPage component's return

  {/* Main content - Card Stacking Area */}
  {/* MODIFIED: Removed flex centering/padding, kept relative and overflow-hidden */}
  <div className="flex-1 relative overflow-hidden">

    <AnimatePresence initial={false}>
      {/* Render Next Card (if exists) - Positioned behind */}
      {currentStockIndex + 1 < stocks.length && (
        <motion.div
          key={`stackcard-${currentStockIndex + 1}`}
          // MODIFIED: Use inset-0 and padding
          className="absolute inset-0 p-4"
          style={{ zIndex: 1 }}
          // ... (keep initial, animate, exit, transition props as they were)
          initial={{ scale: 0.95, y: 15, opacity: 0.9 }}
          animate={{ scale: 0.95, y: 15, opacity: 0.9 }}
          exit={{ scale: 0.9, y: 30, opacity: 0 }}
          transition={{ type: 'spring', stiffness: 500, damping: 50 }}
        >
          <div style={{ pointerEvents: 'none', height: '100%', width: '100%' }}>
            <StockCard
              stock={stocks[currentStockIndex + 1]}
              // ... other props
            />
          </div>
        </motion.div>
      )}

      {/* Render Current Card - Positioned on top */}
      {currentStock && (
         <motion.div
           key={`stackcard-${currentStockIndex}`}
           // MODIFIED: Use inset-0 and padding
           className="absolute inset-0 p-4"
           style={{ zIndex: 2 }}
           // ... (keep initial, animate, transition props as they were)
           initial={{ scale: 1, y: 0, opacity: 1 }}
           animate={{ scale: 1, y: 0, opacity: 1 }}
         >
          {/* StockCard component itself needs h-full and overflow-y-auto */}
          <StockCard
            stock={currentStock}
             // ... other props
          />
         </motion.div>
      )}
    </AnimatePresence>
  </div> // End of main content div

  {/* ... Rest of StockDetailPage (Buttons, Modal) ... */}
This should make the card wrappers take up the full space available within the flex-1 container, allowing the StockCard (which has h-full overflow-y-auto) inside the top wrapper to render at its full height and enable vertical scrolling for its content.
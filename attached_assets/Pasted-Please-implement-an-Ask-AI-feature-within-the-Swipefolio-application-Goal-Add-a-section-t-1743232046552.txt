Please implement an "Ask AI" feature within the Swipefolio application.

**Goal:** Add a section to the individual stock card UI (`client/src/components/ui/stock-card.tsx`) allowing users to ask questions about the currently displayed stock. The AI responses should be informative and educational, drawing context from the stock's data, but MUST strictly avoid giving financial advice. Use the OpenRouter API key stored in Replit Secrets (under the name `OPENROUTER_API_KEY`) for the backend calls.

**Location:**
- The "Ask AI" section should appear within the `StockCard` component (`client/src/components/ui/stock-card.tsx`), specifically positioned *below* the existing `<ComparativeAnalysis />` component.

**Frontend Implementation (`client/src/components/ui/stock-card.tsx` and potentially a new sub-component):**

1.  **UI Elements:**
    * Add a collapsible section below `<ComparativeAnalysis />`, perhaps titled "Ask AI about [Stock Name]". Use ShadCN UI components like `Accordion` or `Collapsible` for this.
    * Inside the collapsible section, add:
        * A `Textarea` component for the user to type their question.
        * A "Send" `Button` (with an icon like a paper plane).
        * An area to display the AI's response (e.g., a `div` with appropriate styling).
        * A loading indicator (e.g., `Loader2` from `lucide-react`) to show while waiting for the AI response.
        * Display a disclaimer below the response area: "AI responses are for educational purposes only and are not financial advice."

2.  **State Management:**
    * Add state variables within the `StockCard` (or a new dedicated child component for the AI section) to manage:
        * `userQuestion` (string, for the textarea).
        * `aiResponse` (string, to store the AI's answer).
        * `isLoadingAI` (boolean, to show the loading indicator and disable the send button).
        * `errorAI` (string | null, to display any errors).

3.  **Event Handling:**
    * Implement an `onChange` handler for the `Textarea` to update `userQuestion`.
    * Implement an `onClick` handler for the "Send" button (`handleSendQuestion`).

4.  **API Call Logic (`handleSendQuestion` function):**
    * This function should:
        * Set `isLoadingAI` to true and clear previous `aiResponse` and `errorAI`.
        * Get the current `stock` object (available as a prop in `StockCard`).
        * Construct a context object containing relevant information about the stock (e.g., `stock.ticker`, `stock.name`, `stock.description`, maybe key metrics like `stock.metrics.performance.value`).
        * Make a `Workspace` POST request to a **new backend endpoint** (e.g., `/api/ai/ask-stock`).
        * Send a JSON body containing the `userQuestion` and the `stockContext`.
        * Handle the response:
            * On success: Update `aiResponse` with the answer from the backend.
            * On error: Update `errorAI` with an error message.
        * Set `isLoadingAI` to false.

**Backend Implementation:**

1.  **Create New Route:**
    * In `server/routes.ts` (or a new dedicated file like `server/api/ai.ts` and register it), create a new POST route, e.g., `/api/ai/ask-stock`.
    * Ensure this route uses `express.json()` middleware to parse the request body.
    * *(Optional but recommended)*: Add authentication middleware to ensure only logged-in users can use this feature.

2.  **Route Handler Logic:**
    * The handler function for `/api/ai/ask-stock` should:
        * Extract `userQuestion` and `stockContext` from `req.body`.
        * Retrieve the OpenRouter API key from Replit Secrets: `const apiKey = process.env.OPENROUTER_API_KEY;`. Handle the case where the key is missing.
        * **Construct the Prompt:** Create a detailed prompt for the language model. This is crucial. It should:
            * Clearly state the AI's role (educational finance assistant).
            * Provide the stock context received from the frontend (name, ticker, description, etc.).
            * Include the user's specific `userQuestion`.
            * **Explicitly instruct the AI:**
                * To answer the question based *only* on the provided stock context and general financial knowledge.
                * To explain concepts clearly and simply.
                * **To strictly avoid giving any financial or investment advice, recommendations, or price predictions.**
                * To state it cannot answer if the question asks for advice or goes beyond its knowledge scope.
        * **Make API Call to OpenRouter:**
            * Use `axios` or `node-fetch` to make a POST request to the OpenRouter chat completions endpoint (`https://openrouter.ai/api/v1/chat/completions`).
            * **Headers:** Include `Authorization: Bearer ${apiKey}` and `Content-Type: application/json`.
            * **Body:** Send a JSON payload matching the OpenRouter API format. This typically includes:
                * `model`: (Optional, but recommended) Set to the specific model ID like `"google/gemini-flash-1.5"` to ensure it's used. If omitted, your OpenRouter account default will be used.
                * `messages`: An array containing the prompt (usually with roles like `system` for instructions and `user` for the combined context+question). Example:
                    ```json
                    {
                      "model": "google/gemini-flash-1.5", // Or omit to use default
                      "messages": [
                        {"role": "system", "content": "You are an educational assistant for the Swipefolio app. Explain financial concepts related to the provided stock context simply. DO NOT give financial advice, recommendations, or price predictions. Answer based only on the context and general knowledge. If asked for advice, state you cannot provide it."},
                        {"role": "user", "content": "Context: Stock Name: [Stock Name], Ticker: [Ticker], Description: [Description]. Question: [User Question]"}
                      ]
                    }
                    ```
        * **Handle Response:**
            * Check for errors from the OpenRouter API call.
            * Parse the successful JSON response. Extract the AI's generated message content (usually within `response.data.choices[0].message.content`).
        * **Send Response to Frontend:** Send a JSON response back to the Swipefolio client containing the AI's answer (e.g., `{ answer: "AI's response here..." }`). Handle potential errors by sending an appropriate error status and message.

3.  **Error Handling:** Implement robust error handling for missing API keys, failed calls to OpenRouter, and invalid user input.

**Security:**
- Reiterate that the `OPENROUTER_API_KEY` **must** be stored using Replit Secrets and only accessed from the backend server code.

This detailed breakdown should provide the Replit AI agent with clear instructions to build the "Ask AI" feature effectively and securely. Remember to check OpenRouter's specific API documentation for the exact request format and model IDs.
Okay, I understand. It seems the previous approach still had components calculating things independently and trying to update a shared source, leading to conflicts. Let's simplify this drastically by making the PortfolioContext the single source of truth for the current user's stats and having both the leaderboard page and the homepage widget read directly from it.

Here's a breakdown of why values might not be updating or are incorrect, followed by bite-sized instructions for the Replit agent:

Analysis:

The Core Problem: The main issue is that both competition-tracker.tsx (homepage widget) and leaderboard-page.tsx are trying to calculate and update the user's stats (especially the 'Quality' score) independently and then push these possibly conflicting updates into an external data source (@/data/leaderboard-data.ts) using updateUserStats. They then refetch from this external source. This creates inconsistencies and prevents reliable updates.

competition-tracker.tsx calculates Quality incorrectly based on diversification/growth [source: 4478].
leaderboard-page.tsx tries to calculate Quality correctly from the context but still pushes it back out via updateUserStats [source: 4477].
Whichever component updates last "wins," potentially writing incorrect data that the other component then reads.
Solution: Stop calculating user stats in the components and stop using updateUserStats. Instead:

Ensure PortfolioContext correctly calculates all user metrics (ROI, Trades, Quality Score based on the 25% average).
Make both competition-tracker.tsx and leaderboard-page.tsx read the current user's live stats directly from PortfolioContext.
Fetch only the static bot data from @/data/leaderboard-data.ts.
Combine the live user data and static bot data within each component for display.
Bite-Sized Instructions for Replit Agent:

Goal: Make PortfolioContext the single source for the current user's leaderboard stats and have components read directly from it.

Instruction Set 1: Ensure Correct Calculations in PortfolioContext

File: client/src/contexts/portfolio-context.tsx
Verify: Confirm the portfolioMetrics object calculates qualityScore only as the average of the other four metrics (performance, stability, value, momentum) calculated within the context. Make sure it handles an empty portfolio (score = 0). (Refer to the correct calculation provided in the previous response).
Add Trades: Add a trades count to portfolioMetrics. The simplest way for now is:
TypeScript

const trades = holdings.length; // Each holding represents one buy 'trade' for now

const portfolioMetrics = {
  // ... other metrics ...
  qualityScore: qualityScore, // The averaged one
  trades: trades // Add trades count
};
Add ROI: Add the projected ROI calculation to portfolioMetrics.
TypeScript

 // Calculate projected ROI percentage
 const totalInvestedForROI = holdings.reduce((total, h) => total + (h.shares * h.purchasePrice), 0);
 let projectedReturnPercent = 0;
 if (totalInvestedForROI > 0) {
   const oneYearReturnsValue = holdings.reduce((total, h) => {
     const oneYearReturnPercentValue = 
         typeof h.stock.oneYearReturn === 'number' ? h.stock.oneYearReturn :
         typeof h.stock.oneYearReturn === 'string' ? parseFloat(h.stock.oneYearReturn.replace('%', '')) : 0;
     const stockValue = h.shares * h.purchasePrice;
     const stockReturn = stockValue * (oneYearReturnPercentValue / 100);
     return total + stockReturn;
   }, 0);
   projectedReturnPercent = (oneYearReturnsValue / totalInvestedForROI) * 100;
 }

 const portfolioMetrics = {
   performance: performanceScore,
   stability: stabilityScore,
   value: valueScore,
   momentum: momentumScore,
   qualityScore: qualityScore,
   trades: trades,
   roi: projectedReturnPercent // Add ROI
 };
Export: Ensure the portfolioMetrics (including roi, trades, qualityScore) is part of the contextValue being provided.
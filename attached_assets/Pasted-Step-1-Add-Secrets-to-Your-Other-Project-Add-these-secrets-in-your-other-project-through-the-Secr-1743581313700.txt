Step 1: Add Secrets to Your Other Project
Add these secrets in your other project (through the Secrets/Environment tab):

PGHOST: ep-jolly-thunder-a51ef2m8.us-east-2.aws.neon.tech
PGPORT: 5432
PGUSER: neondb_owner
PGDATABASE: neondb
PGPASSWORD: [Copy from this project's Secrets tab]
DATABASE_URL: postgres://neondb_owner:[password]@ep-jolly-thunder-a51ef2m8.us-east-2.aws.neon.tech:5432/neondb
Step 2: Install PostgreSQL Client Library
For Python:
pip install psycopg2-binary
For Node.js:
npm install pg
Step 3: Database Connection Code
Python Connection Example:
import os
import psycopg2
from psycopg2.extras import RealDictCursor  # For returning results as dictionaries
def get_db_connection():
    """
    Get a connection to the PostgreSQL database.
    
    Returns:
        Connection object
    """
    try:
        # Use the DATABASE_URL environment variable if available
        if os.environ.get("DATABASE_URL"):
            conn = psycopg2.connect(os.environ.get("DATABASE_URL"))
        else:
            # Otherwise, use individual connection parameters
            conn = psycopg2.connect(
                host=os.environ.get("PGHOST"),
                port=os.environ.get("PGPORT"),
                user=os.environ.get("PGUSER"),
                password=os.environ.get("PGPASSWORD"),
                database=os.environ.get("PGDATABASE")
            )
        return conn
    except Exception as e:
        print(f"Error connecting to PostgreSQL database: {e}")
        return None
# Example of querying all stocks
def get_all_stocks():
    try:
        with get_db_connection() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute("""
                    SELECT ticker, company_name, sector, industry 
                    FROM stocks 
                    ORDER BY ticker
                """)
                stocks = cur.fetchall()
                return stocks
    except Exception as e:
        print(f"Error fetching stocks: {e}")
        return []
# Example of querying a specific stock
def get_stock_data(ticker):
    try:
        with get_db_connection() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                # Get basic stock info
                cur.execute("""
                    SELECT * FROM stocks WHERE ticker = %s
                """, (ticker,))
                basic_info = cur.fetchone()
                
                if not basic_info:
                    return None
                
                # Get detailed stock data
                cur.execute("""
                    SELECT * FROM stock_data WHERE ticker = %s
                """, (ticker,))
                detailed_info = cur.fetchone()
                
                # Combine results
                stock_data = {**basic_info}
                if detailed_info:
                    for key, value in detailed_info.items():
                        if key != 'ticker':  # Skip ticker since it's already in basic_info
                            stock_data[key] = value
                
                return stock_data
    except Exception as e:
        print(f"Error fetching data for {ticker}: {e}")
        return None
Node.js Connection Example:
const { Pool } = require('pg');
// Create a connection pool
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  // If DATABASE_URL isn't available, it will fall back to these:
  host: process.env.PGHOST,
  port: process.env.PGPORT,
  user: process.env.PGUSER,
  password: process.env.PGPASSWORD,
  database: process.env.PGDATABASE,
  ssl: {
    rejectUnauthorized: false
  }
});
// Example: Get all stocks
async function getAllStocks() {
  try {
    const result = await pool.query(`
      SELECT ticker, company_name, sector, industry 
      FROM stocks 
      ORDER BY ticker
    `);
    return result.rows;
  } catch (err) {
    console.error('Error fetching all stocks:', err);
    return [];
  }
}
// Example: Get a specific stock with all its data
async function getStockData(ticker) {
  try {
    // Get basic stock info
    const basicResult = await pool.query(`
      SELECT * FROM stocks WHERE ticker = $1
    `, [ticker]);
    
    if (basicResult.rows.length === 0) {
      return null;
    }
    
    const stockData = basicResult.rows[0];
    
    // Get detailed stock data
    const detailedResult = await pool.query(`
      SELECT * FROM stock_data WHERE ticker = $1
    `, [ticker]);
    
    if (detailedResult.rows.length > 0) {
      const detailedData = detailedResult.rows[0];
      // Merge detailed data, excluding ticker
      Object.keys(detailedData).forEach(key => {
        if (key !== 'ticker') {
          stockData[key] = detailedData[key];
        }
      });
    }
    
    return stockData;
  } catch (err) {
    console.error(`Error fetching data for ${ticker}:`, err);
    return null;
  }
}
// Example: Export the functions for use in other files
module.exports = {
  getAllStocks,
  getStockData,
  pool
};
Step 4: Database Schema Information
Here's the schema information for the tables in the database:

Main Tables:
stocks - Basic information about each stock

ticker (primary key)
company_name
sector
industry
current_price
market_cap
dividend_yield
beta
etc.
stock_data - Detailed data for each stock

ticker (primary key, foreign key to stocks)
closing_history (JSON)
dividends (JSON)
income_statement (JSON)
balance_sheet (JSON)
cash_flow (JSON)
recommendations (JSON)
earnings_dates (JSON)
earnings_history (JSON)
earnings_trend (JSON)
upgrades_downgrades (JSON)
financial_data (JSON)
institutional_holders (JSON)
major_holders (JSON)
etc.
sectors - Market sector information

sector_key (primary key)
name
description
metrics (JSON)
market_data - Overall market data

market (primary key, e.g., "US")
name
metrics (JSON)
last_updated (timestamp)
Step 5: Example Queries
Here are some useful queries for working with the data:

-- Get all stocks in a specific sector
SELECT * FROM stocks WHERE sector = 'Technology' ORDER BY market_cap DESC;
-- Get financial statement data for a stock
SELECT ticker, income_statement FROM stock_data WHERE ticker = 'AAPL';
-- Get stocks with highest dividend yield
SELECT ticker, company_name, dividend_yield 
FROM stocks 
WHERE dividend_yield IS NOT NULL 
ORDER BY dividend_yield DESC 
LIMIT 10;
-- Get stocks with recent analyst upgrades
SELECT s.ticker, s.company_name, s.sector, sd.upgrades_downgrades
FROM stocks s
JOIN stock_data sd ON s.ticker = sd.ticker
WHERE sd.upgrades_downgrades IS NOT NULL
ORDER BY s.ticker;
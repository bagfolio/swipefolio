Please remove the previous "Ask AI" feature implementation and create a new AI feature focused on portfolio analysis.

**Goal:** Add a feature to the Portfolio page (`client/src/pages/portfolio-page.tsx` or `client/src/components/portfolio-dashboard.tsx`) that allows users to request an AI-generated educational analysis of their current virtual portfolio composition. The analysis MUST be purely educational, focusing on diversification and relating concepts back to the app's learning stacks, and MUST NOT provide financial advice, recommendations, or performance predictions.

**1. Remove Previous AI Code:**

* **Frontend:**
    * Delete the component file `client/src/components/ask-ai.tsx`.
    * In `client/src/components/ui/stock-card.tsx`, remove the import for `AskAI` and remove the `<AskAI />` component instance and its wrapper `div` (including the `stopPropagation` handlers).
* **Backend:**
    * You can keep the existing `/api/ai/ask-stock` route in `server/routes.ts` as a foundation, but we will modify its logic significantly (or rename it to `/api/ai/analyze-portfolio`).

**2. Implement New Backend Logic (Modify/Create `/api/ai/analyze-portfolio` in `server/routes.ts`):**

* **Route:** Create or modify a POST route, e.g., `/api/ai/analyze-portfolio`.
* **Input:** The route should expect portfolio data in the request body (`req.body`). This might include holdings (tickers, amounts/weights), overall portfolio metrics (like quality score, maybe sector allocation if available from the frontend context).
* **API Key:** Continue retrieving the `OPENROUTER_API_KEY` from Replit Secrets (`process.env.OPENROUTER_API_KEY`).
* **Prompt Construction:** This is the core change. Create a new prompt specifically for portfolio analysis:
    * **System Prompt:** Define the AI's role clearly. Example: "You are an educational assistant for the Swipefolio app. Analyze the provided virtual portfolio data. Focus ONLY on educational observations about its composition, diversification (e.g., sector concentration), and general characteristics based on the data provided. Relate observations to financial concepts taught in the app (like diversification, risk). **DO NOT provide any financial advice, investment recommendations, buy/sell suggestions, or performance predictions.** Keep the analysis concise and easy to understand for a beginner."
    * **User Message:** Format the portfolio data received from the frontend into a string for the AI. Example: "Analyze this virtual portfolio: Holdings: [List tickers and maybe weights/sectors], Metrics: [Quality Score, etc.]."
* **OpenRouter Call:** Make the API call to OpenRouter (using `axios` or `Workspace`) similar to before:
    * Use the `google/gemini-flash-1.5` model (or your preferred model).
    * Send the *newly constructed* system and user prompts in the `messages` array.
    * Include the `Authorization: Bearer ${apiKey}` header.
* **Response:** Extract the AI's analysis text from the response and send it back to the frontend (e.g., `{ analysis: "AI analysis text..." }`). Include error handling.

**3. Implement New Frontend Feature (`client/src/pages/portfolio-page.tsx` or `client/src/components/portfolio-dashboard.tsx`):**

* **UI Elements:**
    * Add a `Button` somewhere appropriate on the page (e.g., within the `PortfolioDashboard` or near the metrics display). Label it "Analyze My Portfolio (AI)". Add an icon like `Sparkles` or `BrainCircuit` from `lucide-react`.
    * Add an area below or near the button where the analysis text will be displayed *after* the button is clicked. This could be inside a `Card` component or just a styled `div`. Initially, this area should be hidden or empty.
    * Include the disclaimer: "AI analysis is for educational purposes only and not financial advice." near the display area.
* **State Management:** Add state variables to the component:
    * `analysisResult` (string | null, to store the AI's analysis).
    * `isLoadingAnalysis` (boolean, for the button's loading state).
    * `errorAnalysis` (string | null, to display errors).
* **Event Handling:**
    * Implement an `async` function `handleAnalyzePortfolio` to be called by the button's `onClick`.
* **API Call Logic (`handleAnalyzePortfolio`):**
    * Set `isLoadingAnalysis` to true, clear previous `analysisResult` and `errorAnalysis`.
    * Access the `portfolio` data from `PortfolioContext` (holdings, portfolioMetrics).
    * Construct a portfolio data object to send to the backend (include relevant pieces like `holdings`, `portfolioMetrics.qualityScore`, maybe sector breakdowns if available).
    * Make a `Workspace` POST request to your backend endpoint (`/api/ai/analyze-portfolio`), sending the portfolio data object in the body.
    * Handle the response:
        * On success (`response.ok`): Parse the JSON, update `analysisResult` with `data.analysis`.
        * On error: Parse the error message if possible, update `errorAnalysis`.
    * Set `isLoadingAnalysis` to false in a `finally` block.
* **Conditional Rendering:**
    * Render the `analysisResult` text inside the designated display area only when `analysisResult` is not null.
    * Render the `errorAnalysis` message if it's not null.
    * Show a loading indicator (e.g., `Loader2` icon) on the button when `isLoadingAnalysis` is true and disable the button.

**Security:**
- Ensure the `OPENROUTER_API_KEY` remains only in Replit Secrets and is accessed only by the backend.

This approach moves the AI feature to a less complex UI area (Portfolio page), changes the interaction model to a simple request/display (reducing potential event conflicts), and tailors the AI's purpose specifically to educational portfolio analysis, avoiding the complexities of a conversational chat within the swipeable `StockCard`.
Modify LearnPage.tsx (File: client/src/pages/LearnPage.tsx):

Render Multiple Cards: Change the rendering logic to display at least the current card (currentIndex) and the next card (currentIndex + 1). You might want to render 2 or 3 cards total for a smoother visual stack.

Use AnimatePresence: Wrap the card mapping/rendering logic with <AnimatePresence> from framer-motion. This will help manage the smooth entry and exit animations as cards are added/removed from the stack.

Pass Index/Position Props: When mapping over the slice of cards to render (e.g., cards.slice(currentIndex, currentIndex + 2)), pass information to SwipeableCard indicating its position in the visible stack (e.g., indexInStack={i} where i is 0 for the top card, 1 for the next, etc.). Also pass the currentIndex itself if needed.

Handle End of Deck: Ensure the logic correctly handles the boundary conditions when currentIndex + 1 is out of bounds (no more cards). AnimatePresence usually helps here, but verify the rendering logic doesn't crash.

Example Instruction: "In LearnPage.tsx, modify the card rendering section. Instead of just showing cards[currentIndex], map over a small slice like cards.slice(currentIndex, currentIndex + 2) or cards.slice(currentIndex).reverse().slice(0, 2).reverse() (to keep order correct) inside an <AnimatePresence> component from framer-motion. For each rendered SwipeableCard, pass a prop indicating its position in the visible stack, like indexInStack={stackIndex} (0 for top, 1 for next)."

Modify SwipeableCard.tsx (File: client/src/components/SwipeableCard.tsx):

Accept Position Prop: Update the component's props (SwipeableCardProps) to accept the indexInStack prop passed from LearnPage.tsx.

Dynamic Styling based on Position: Use the indexInStack prop to apply dynamic styles to the main motion.div.

Stacking (z-index): The top card (indexInStack === 0) should have the highest z-index (e.g., 2), the next card (indexInStack === 1) should have a lower one (e.g., 1). Calculate this dynamically: zIndex: cardsToRender - indexInStack.
Scaling (scale): The top card should have scale: 1. Subsequent cards should be slightly scaled down (e.g., scale: 1 - indexInStack * 0.05). Apply this scale within the animate prop of motion.div so it animates smoothly when a card becomes the top card.
Opacity/Offset (Optional): You could also slightly reduce opacity or add a small vertical offset (y translation) for cards further down the stack based on indexInStack.
Initial Animation State: Ensure the initial animation state in motion.div accounts for these stacked styles (e.g., starts scaled down if it's not the top card initially).

Animation on State Change: The animate prop should react to changes in indexInStack. When a card goes from indexInStack: 1 to indexInStack: 0, it should animate to scale: 1, opacity: 1, y: 0, etc.

Drag Interaction: Ensure only the top card (indexInStack === 0) is draggable. You can conditionally enable/disable the drag prop: drag={indexInStack === 0 ? "x" : false}.

Positioning Context: Double-check that the parent container in LearnPage.tsx has position: relative or position: absolute to establish a proper stacking context for the absolute positioned cards and their z-index values. This is crucial to prevent conflicts with popups or other overlays.

Example Instruction: "In SwipeableCard.tsx:

Accept an indexInStack number prop.
Make the main motion.div position: absolute.
Set zIndex dynamically: zIndex: 2 - indexInStack (assuming max 2 cards shown).
Conditionally enable dragging: drag={indexInStack === 0 ? 'x' : false}.
Use the animate prop to control scale and y offset based on indexInStack. For example: animate={{ scale: 1 - indexInStack * 0.05, y: indexInStack * 10 }}. Adjust values for desired visual effect. Ensure these properties transition smoothly using the default spring or a specified transition."
Review CSS & Potential Conflicts:

After implementing the stacking, thoroughly test the interaction with the "Congratulations Popup" and any other overlays or fixed elements. Ensure the z-index values used for the cards and the popup are appropriate (e.g., popup should likely have a much higher z-index than the cards).

Make sure no container styles (like overflow: hidden on the wrong element) are clipping the cards unexpectedly during drag or animation.

Example Instruction: "Review the z-index values across SwipeableCard.tsx, LearnPage.tsx, and the CongratulationsPopup. Ensure the popup reliably appears above the card stack. Check parent container styles in LearnPage.tsx to prevent incorrect clipping (overflow) of the cards."

By applying these changes, focusing on rendering multiple cards with dynamic styling controlled by framer-motion and AnimatePresence, and carefully managing z-index, the agent should be able to achieve the desired Tinder-like stacking effect while maintaining smooth performance and avoiding CSS conflicts.
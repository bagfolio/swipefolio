Yes, AAPL has closing_history data! ALL of the major stocks (AAPL, MSFT, GOOG, AMZN, TSLA, WMT, TGT) have closing_history data. The field is properly structured with "Date" and "Close" arrays.

Growth projections and earnings data:

The earnings_history field contains actual vs estimated EPS with surprise percentages
The income_statement field has 5 years of revenue and earnings data with year-over-year comparisons
Growth can be calculated from the sequential yearly data in income_statement
Structure in PostgreSQL:
The database has these key fields for financial analysis:

closing_history: Historical stock prices (Date and Close arrays)
earnings_history: EPS projections and actual results
income_statement: Complete income data with revenue, profit, and EPS
balance_sheet: Assets, liabilities, equity
cash_flow: Cash movement data
recommendations: Analyst recommendations
To access growth projections:

def calculate_growth_rate(ticker, metric="TotalRevenue"):
    """Calculate growth rate using income statement data"""
    query = f"SELECT income_statement FROM stock_data WHERE ticker = '{ticker}'"
    result = execute_query(query)
    
    income_data = result[0]['income_statement']
    dates = income_data['Date']
    metrics = income_data[metric]
    
    # Calculate year-over-year growth rates
    growth_rates = []
    for i in range(len(metrics)-1):
        if metrics[i] and metrics[i+1]:  # Check for non-null values
            growth = (metrics[i] - metrics[i+1]) / metrics[i+1] * 100
            growth_rates.append({
                'period': f"{dates[i+1]} to {dates[i]}",
                'growth': growth
            })
    
    return growth_rates
For earnings projections:

def get_earnings_projections(ticker):
    """Get forward-looking EPS projections"""
    query = f"SELECT earnings_history FROM stock_data WHERE ticker = '{ticker}'"
    result = execute_query(query)
    
    earnings_data = result[0]['earnings_history']
    
    projections = []
    for date in earnings_data['epsEstimate']:
        projections.append({
            'date': date,
            'eps_estimate': earnings_data['epsEstimate'][date],
            'eps_actual': earnings_data['epsActual'].get(date),
            'surprise_percent': earnings_data['surprisePercent'].get(date)
        })
        
    return projections
All the data is there! It's just structured in a way that requires appropriate processing to access the growth and projection data. Would you like me to explain any specific part of the data structure in more detail?
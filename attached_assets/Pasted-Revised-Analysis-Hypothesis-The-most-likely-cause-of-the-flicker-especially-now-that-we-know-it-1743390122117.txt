Revised Analysis & Hypothesis:

The most likely cause of the flicker, especially now that we know it happens on both open and close, seems to be related to how the visibility states of the PortfolioImpactCalculator and the PurchaseSuccessModal are managed and how their animations might overlap or conflict, particularly on iOS.

Closing Flicker (During Invest):
Inside PortfolioImpactCalculator's handleInvest function [source: 8455-8456], it calls buyStock, then sets showSuccessModal(true), and immediately calls onClose().
onClose() (passed from StockCard) sets isPortfolioImpactOpen(false) in the parent [source: 8891], triggering the calculator's exit animation.
At the same time, showSuccessModal(true) makes the PurchaseSuccessModal (rendered within PortfolioImpactCalculator [source: 8549]) try to animate in.
This simultaneous exit animation of the calculator and entry animation of the success modal, potentially within nested components, is a prime suspect for causing rendering glitches or flickers on iOS.
Opening Flicker (Swipe Right):
In StockCard, the handleDragEnd uses debouncedOpenPortfolioImpact when swiping right [source: 8732, 8718]. While debouncing helps, there might still be subtle timing conflicts between the card's spring-back animation (cardControls.start) [source: 8733] and the modal's appearance, or the 100ms debounce might not be sufficient on all iOS devices/browsers.
However, the closing flicker provides a stronger clue related to modal management.
Debugging Ideas & Instructions for Replit Agent:

Here are the most promising ways to address this, prioritized:

1. Lift Modal State & Rendering (Recommended First Step):

This involves moving the control and rendering of both modals out of PortfolioImpactCalculator and into the parent component (StockCard.tsx).

Plaintext

**Goal:** Refactor modal management to prevent animation conflicts by controlling both PortfolioImpactCalculator and PurchaseSuccessModal visibility from the parent `StockCard` component.

**File 1: `client/src/components/ui/stock-card.tsx`**

1.  **Add State:** Introduce a new state variable to manage which modal (if any) is visible. Example:
    ```typescript
    const [modalState, setModalState] = useState<'closed' | 'calculator' | 'success'>('closed');
    const [purchaseData, setPurchaseData] = useState<{ shares: number; amount: number; projectedReturn: number } | null>(null);
    ```
2.  **Modify `handleDragEnd`:** Instead of `setIsPortfolioImpactOpen(true)` [source: 8732], set `setModalState('calculator')`. Remove the `debouncedOpenPortfolioImpact` and related state/useEffect [source: 8718].
3.  **Modify `openPortfolioCalculator` function:** Change it to `setModalState('calculator')`.
4.  **Modify `onNext` prop function (passed down):** Ensure this function is only called *after* the success modal is closed.
5.  **Add `handlePurchaseComplete` function:** Create a function like this:
    ```typescript
    const handlePurchaseComplete = (data: { shares: number; amount: number; projectedReturn: number }) => {
      setPurchaseData(data);
      setModalState('success'); // Switch from calculator to success modal
    };
    ```
6.  **Add `handleSuccessModalClose` function:** Create a function like this:
    ```typescript
    const handleSuccessModalClose = () => {
      setModalState('closed'); // Close the success modal
      setPurchaseData(null);
      onNext(); // Call onNext AFTER closing the success modal
    };
    ```
7.  **Render Modals Conditionally:** *Outside* the main draggable `motion.div` of the `StockCard`, add rendering logic:
    ```typescript
    {modalState === 'calculator' && (
      <PortfolioImpactCalculator
        isOpen={true} // Always true when rendered
        onClose={() => setModalState('closed')}
        // NEW PROP: Pass the purchase completion handler
        onPurchaseComplete={handlePurchaseComplete}
        // REMOVE onInvest prop (handled by handleSuccessModalClose now)
        stock={stock}
      />
    )}
    {modalState === 'success' && purchaseData && (
      <PurchaseSuccessModal
        isOpen={true} // Always true when rendered
        onClose={handleSuccessModalClose}
        stock={stock}
        shares={purchaseData.shares}
        amount={purchaseData.amount}
        projectedReturn={purchaseData.projectedReturn}
      />
    )}
    ```
    *Make sure `PurchaseSuccessModal` is imported.*

**File 2: `client/src/components/ui/portfolio-impact-calculator.tsx`**

1.  **Update Props:** Modify `PortfolioImpactCalculatorProps`:
    * Remove `onInvest: () => void;`
    * Add `onPurchaseComplete: (data: { shares: number; amount: number; projectedReturn: number }) => void;`
2.  **Modify `handleInvest` function [source: 8455]:**
    * Remove the call to `setShowSuccessModal(true)`.
    * Remove the call to `onClose()`.
    * After successfully calling `buyStock`, call the new prop:
        ```typescript
        onPurchaseComplete({ shares, amount: investmentAmount, projectedReturn });
        ```
3.  **Remove `PurchaseSuccessModal` Rendering:** Delete the `<PurchaseSuccessModal ... />` instance and its related state (`showSuccessModal`, `setShowSuccessModal`) [source: 8426, 8549] from this file. The parent (`StockCard`) now handles rendering it.
4.  **Remove `handleSuccessModalClose` function [source: 8457-8459]:** This logic is now in `StockCard`.
5.  **(Optional but recommended):** Since the parent now fully controls `isOpen`, you might simplify the component by removing the outer `AnimatePresence` [source: 8461] and the `initial`, `animate`, `exit` props from the main `motion.div` [source: 8463-8466] within `PortfolioImpactCalculator`. Its appearance/disappearance is now handled by the parent's conditional rendering.

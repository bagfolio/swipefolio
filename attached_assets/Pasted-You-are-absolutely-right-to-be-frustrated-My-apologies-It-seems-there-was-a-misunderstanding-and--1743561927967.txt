You are absolutely right to be frustrated! My apologies. It seems there was a misunderstanding, and the agent likely created or modified the wrong files (LearnPage.tsx / SwipeableCard.tsx) instead of the ones you are actually using for swiping through stocks. The LearnPage is likely irrelevant to the stock swiping you care about.

Let's get the agent focused on the correct part of your codebase and fix the black background issue while implementing the stacked card view.

Please give these instructions to the Replit Agent:

1. Find the Correct Stock Swiping Component:

"Stop modifying LearnPage.tsx and the SwipeableCard.tsx you recently created/edited. These might be the wrong files."
"We need to find the component actually used for swiping through stocks. Look in client/src/pages/ for files like LessonPage.tsx or StockDetailPage.tsx. Check which component is used for the /lesson/:stackId or /stock/:stackId routes in client/src/App.tsx."
"Open the file you identify (e.g., LessonPage.tsx or StockDetailPage.tsx) and the component it uses for the individual cards (it might be a different SwipeableCard component or named something else)."
2. Implement Stacked View in the Correct Component:

(In the Page Component - e.g., LessonPage.tsx):

"Ensure you are fetching the list of stocks (or 'cards' representing stocks)."
"Identify where the individual stock cards are rendered. Modify this section to render multiple cards (e.g., the current one and the next 1-2)."
"Wrap this mapping/rendering logic with <AnimatePresence> from framer-motion."
"When rendering each card component, pass a prop indicating its position in the visible stack (e.g., indexInStack={i} where i is 0 for the top card, 1 for the next, etc.) and the total number of visible cards (e.g., totalInStack={cardsToRender})."
(Self-Correction: The agent's previous LearnPage code already did some of this - check if the actual page component uses state like currentCardIndex and how it maps cards).
(In the Card Component - e.g., the actual SwipeableCard.tsx or similar):

"Make sure this component accepts the indexInStack and totalInStack props."
"The main container (motion.div) should have position: 'absolute'. Its parent container needs a non-static position (like relative or absolute) to establish a stacking context."
"Apply dynamic styles based on indexInStack:"
zIndex: totalInStack - indexInStack
scale: 1 - indexInStack * 0.05 (Adjust 0.05 for desired look)
y: indexInStack * 10 (Vertical offset, adjust 10 for desired look)
opacity: indexInStack === 0 ? 1 : 0.8 (Optional: make lower cards slightly transparent, adjust 0.8)
"Use the animate prop in motion.div to apply these dynamic styles (scale, y, opacity) so they animate smoothly when indexInStack changes."
"Ensure only the top card (indexInStack === 0) is draggable. Set the drag prop conditionally: drag={indexInStack === 0 ? 'x' : false}."
"Review the onDragEnd handler. It should determine swipe direction (left/right) based on info.offset.x and call the appropriate function passed via props (like onSwipeLeft/onSwipeRight). It does not need to manually animate the exit - AnimatePresence in the parent handles that."
3. Debug the "Black Background" Issue:

"While the swipe animation is happening (especially as one card leaves and the next potentially enters), inspect the elements using browser developer tools."
Check Container Background: "Find the container element that holds the stack of cards in the correct page component (e.g., LessonPage.tsx). What is its background color? Explicitly set a temporary, bright background (e.g., className='bg-blue-300') on this container. Does the blue color flash during the swipe instead of black? If yes, the issue is likely that this container's background is showing through."
If the container background shows: Ensure the cards themselves have a solid background (e.g., bg-white in the card component) and that the animations (opacity/scale/position) of the entering/exiting cards overlap sufficiently so the container isn't exposed. Adjust AnimatePresence timings or the card component's exit/initial animation variants if needed.
Check Higher-Level Backgrounds: "If the container background isn't the issue, inspect parent elements, potentially all the way up to the <body> or root <div> in App.tsx or index.html. Is there a global style setting a black background somewhere that becomes visible during the transition?"
Opacity Transitions: "Review the opacity animations managed by AnimatePresence and within the card component (useTransform for opacity during drag). Ensure opacity doesn't hit 0 too early on the exiting card before the next card is visible, or cause unexpected transparency effects."
By focusing on the correct files used for stock swiping and systematically debugging the background/animation issue, the agent should be able to implement the desired stacked effect and fix the black screen problem. Remember to check the actual component names and props in your specific codebase.
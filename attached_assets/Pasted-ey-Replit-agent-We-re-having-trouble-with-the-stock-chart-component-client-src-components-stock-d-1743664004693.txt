ey Replit agent,

We're having trouble with the stock chart component (client/src/components/stock-detail/stock-chart.tsx). Instead of showing the correct historical closing prices from our PostgreSQL database, it often displays weird or randomly generated data.

The Problem:

The chart fetches data from the /api/stock/:symbol/history endpoint, requesting different timeframes (like ?period=1M, ?period=1Y).
Our PostgreSQL database (stock_data table, closing_history column ) seems to store historical data organized by daily closing prices, likely within JSON structures keyed by period (e.g., "1M", "1Y", "MAX"). You confirmed this structure exists for major stocks. Â  
There seems to be a mismatch in how the requested timeframe (e.g., "1M") is translated into fetching and displaying the correct subset of daily data from the closing_history JSONB field.
Key Areas to Investigate:

Data Source: Please confirm the app is consistently using the PostgreSQL data source (pgStockService) and not falling back to the JSON files. The JSON fallback logic in server/routes.tsgenerates random data if it doesn't find the expected chartData field in the JSON, which could be causing the issue.
Backend Data Fetching (pgStockService.getPriceHistory): How does the pgStockService.getPriceHistory function [cite: 5530-5540, 6351] extract data from the closing_history JSONB based on the requested period? What format does it extract (e.g., array of numbers, array of {date, price} objects, or the { Date: [...], Close: [...] } columnar format)?
API Response Format (/api/stock/:symbol/history): What is the exact structure of the prices field being returned by this API endpoint for a specific period (e.g., ?period=1M)? Is it returning the expected dates and closing prices, or just numbers, or potentially the random fallback data?
Frontend Processing (StockChart.tsx): How does the formatChartData functionin client/src/components/stock-detail/stock-chart.tsx handle the data it receives from the API? Does it correctly map the dates and prices? Is it falling back to generating its own dates?
Request:

Can you help adapt the code (either backend service/route or frontend component) to correctly fetch the relevant daily data points from the closing_history field based on the selected timeframe (e.g., get the last ~30 daily points for "1M") and ensure the StockChart component displays this data with the correct dates and prices? We need to make sure the 'square peg' (daily data) fits the 'circular hole' (timeframe request) properly, avoiding the random data fallback.

Thanks!"
To fix the Portfolio Quality score calculation and ensure data consistency across the leaderboard page and homepage widget:

Centralize Quality Score Calculation in PortfolioContext:

File: client/src/contexts/portfolio-context.tsx
Action: Ensure this context is the single source of truth for the qualityScore. Confirm that the portfolioMetrics object calculates qualityScore only by averaging the performanceScore, stabilityScore, valueScore, and momentumScore calculated within the same context, as per the previous instructions. It should look like this:
TypeScript

// Inside PortfolioProvider...
const performanceScore = calculatePortfolioMetric('performance');
const stabilityScore = calculatePortfolioMetric('stability');
const valueScore = calculatePortfolioMetric('value');
const momentumScore = calculatePortfolioMetric('momentum');

// Correct Quality Score Calculation:
const qualityScore = holdings.length === 0 
                     ? 0 
                     : Math.round((performanceScore + stabilityScore + valueScore + momentumScore) / 4);

const portfolioMetrics = {
  performance: performanceScore,
  stability: stabilityScore,
  value: valueScore,
  momentum: momentumScore,
  qualityScore: qualityScore // Use the direct average
};
// ... rest of the provider
Remove the import and usage of calculatePortfolioQuality from @/data/leaderboard-data within this context file [source: 2444].
Remove Redundant/Incorrect Calculations in Components:

File: client/src/pages/leaderboard-page.tsx
Action: In the main useEffect hook that depends on portfolio, delete the lines that calculate qualityScore using the external calculatePortfolioQuality function [source: 4477].
TypeScript

// Delete this line inside the useEffect:
// const qualityScore = calculatePortfolioQuality(portfolio.holdings); 
File: client/src/components/competition-tracker.tsx
Action: In the useEffect hook that depends on portfolio, delete the block of code that calculates qualityScore based on diversificationScore and growthScore [source: 4478].
TypeScript

// Delete these lines inside the useEffect:
// const diversificationScore = Math.min(50, portfolio.holdings.length * 10); 
// const growthScore = portfolio.holdings.reduce(...) / (portfolio.holdings.length || 1);
// const qualityScore = Math.round((diversificationScore + growthScore) / 2);
Refactor Data Flow - Use Context as Source of Truth:

Goal: Both the leaderboard page and the competition tracker should read the user's current stats directly from the PortfolioContext instead of relying on updating/refetching from @/data/leaderboard-data.ts.
File: client/src/pages/leaderboard-page.tsx
Action 1: Remove the call to updateUserStats(...) from the useEffect hook [source: 4477].
Action 2: Modify the useEffect hook. Instead of calling getLeaderboardData() and getCurrentUserRank() at the end to update state, structure it like this:
Fetch the base leaderboard data (bots only) using a potentially modified function from @/data/leaderboard-data.ts.
Get the current user's live stats (ROI, Trades, Quality Score) directly from the portfolio.portfolioMetrics object obtained via useContext(PortfolioContext). Also get other user details like name/avatar (perhaps from useAuth hook if not in context).
Construct the currentUser object using this live data.
Combine the live currentUser object with the fetched bot data.
Sort the combined list.
Update the component's state (setLeaderboardData, setCurrentUser) with this combined, sorted, live data.
Action 3: Ensure the rendering part maps over leaderboardData and correctly accesses the portfolioQuality key for the Quality column [source: 4477].
File: client/src/components/competition-tracker.tsx
Action 1: Remove the call to updateUserStats(...) from the useEffect hook [source: 4478].
Action 2: Simplify the useEffect. It primarily needs to trigger a refetch of the base bot data and get the live user data from the context, then combine and sort them to update local state (setLeaderboardData, setUserRank) for display in the widget. The complex calculations within the effect are no longer needed as the context provides the scores.
File: @/data/leaderboard-data.ts
Action: Review the updateUserStats, getLeaderboardData, and getCurrentUserRank functions. Modify them so that getLeaderboardData primarily returns the static bot data, and getCurrentUserRank/updateUserStats might become unnecessary if all live user data comes from the context. The goal is to stop treating this module as a mutable state store for the live user.
By making these changes, you will:

Ensure the Portfolio Quality score is calculated consistently and correctly based on your 25/25/25/25 logic within the PortfolioContext.
Eliminate conflicting calculations and updates from different components.
Simplify the data flow, making both the leaderboard page and the homepage widget directly reflect the live state from PortfolioContext.
Let's break down the probable causes based on the codebase and how you might fix them.

It seems the core issues revolve around how the confirmation messages (the unwanted white header toast and the desired green congratulations modal) are triggered and displayed after a purchase is made via the Portfolio Impact Calculator.

Here’s an analysis of the problems and potential solutions:

1. Unwanted White Header Notification
Problem: You're seeing a white header notification bar ("stock purchased you purchased X shares of Y for Z") that you want to remove.
Likely Cause: This notification appears to be a "toast" message. Looking at the code, the buyStock function within your PortfolioContext  includes a call to toast  which displays this exact message upon a successful purchase.   
Solution: To remove this white header bar, you should locate the toast({...}) function call inside the buyStock function in the file client/src/contexts/portfolio-context.tsx  and either delete or comment out that specific line of code.   
2. Background Dimming & Modal Replacement
Problem: The background dims for the unwanted toast, but not for the green congratulations modal (PurchaseSuccessModal). You want the green modal to be the main focus, visually replacing the Portfolio Impact Calculator.
Likely Cause:
The PurchaseSuccessModal seems to be rendered inside the PortfolioImpactCalculator component.   
When the purchase is successful, the PortfolioImpactCalculator might be getting hidden or unmounted, taking the PurchaseSuccessModal (and potentially its intended backdrop ) with it before it can be properly displayed with its dimming effect.   
The dimming effect you see might be associated with the PortfolioImpactCalculator's own backdrop  rather than the success modal's.   
Solution:
Restructure Rendering: Modify the code so that PurchaseSuccessModal is not rendered inside PortfolioImpactCalculator. Instead, manage the visibility of both modals in the parent component (likely StockCard  or potentially StockDetailPage ).   
Conditional Rendering: Use a state variable (e.g., purchaseState which could be 'calculator', 'success', or 'idle') in the parent component.
When the user swipes right, set purchaseState to 'calculator' to show the PortfolioImpactCalculator.
When the handleInvest function inside the calculator is called successfully, it should update this parent state to 'success'.   
The parent component will then hide the PortfolioImpactCalculator and render the PurchaseSuccessModal.
Ensure Backdrop: By rendering the PurchaseSuccessModal independently, its own backdrop  should function correctly, providing the desired dimming effect.   
3. Centering of the Green Congratulations Box
Problem: The PurchaseSuccessModal is not centered correctly; its left edge appears at the screen's center.
Likely Cause: While the CSS for the modal (.success-modal and inline styles) uses the standard position: fixed; left: 50%; top: 50%; transform: translate(-50%, -50%);, which should center it, something else might be interfering:
Parent Styling: Conflicting CSS (like display: flex or transforms) in a parent container within StockCard or StockDetailPage could override the positioning.
Animation Interference: The Framer Motion animations (initial, animate, exit properties ) might be ending in a way that affects the final position, although the defined properties look standard.   
  
Solution:
Inspect Parent Styles: Carefully examine the styles of the parent elements that contain the PurchaseSuccessModal (after restructuring as suggested above). Look for any flexbox, grid, or transform properties that might affect fixed positioning.
Check Framer Motion: Ensure the animate state in the PurchaseSuccessModal's motion.div  correctly defines the final centered position (x: 0, y: 0 relative to the fixed positioning). The current code (y: 0) seems correct, but double-check it isn't being inadvertently overridden.   
CSS Specificity: Use browser developer tools to inspect the PurchaseSuccessModal element when it's displayed. Check which CSS rules are being applied and if any unexpected rules have higher specificity, overriding the centering styles. You might need to adjust CSS or Tailwind class specificity.
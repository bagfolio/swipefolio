! Okay, so the closing flow is smooth now, but the opening (swipe right) still flickers on iOS. Got it. Let's re-examine the latest StockCard.tsx and PortfolioImpactCalculator.tsx.

Analysis:

State Logic Confirmed: Your latest StockCard.tsx correctly uses the unified modalState. The handleInvest in PortfolioImpactCalculator.tsx correctly omits the onClose() call. This is the right structure.
Opening Logic: The handleDragEnd currently starts the card's spring-back animation and then uses a setTimeout(..., 150) to set modalState to 'calculator'.
Remaining Flicker Cause: Since the state logic is clean now, the most likely remaining culprit for the opening flicker is the concurrent animation on iOS. Even with the 150ms delay, the card is animating back to center (cardControls.start({...})) while the modal is trying to animate in (PortfolioImpactCalculator mounts and its motion.div runs its animate prop). iOS WebKit can be fussy about handling multiple complex transforms and opacity changes simultaneously, especially those triggered by gestures.
Debugging Ideas & Instructions for Replit Agent:

Let's try changing the order and type of animations to see if we can avoid this conflict on iOS.

1. Try Opening Modal Before Card Animation:

Reverse the order in handleDragEnd. Open the modal state immediately when the swipe threshold is met, and then animate the card back.

Plaintext

**Goal:** Change the animation sequence on right-swipe to potentially avoid iOS conflicts.

**File:** `client/src/components/ui/stock-card.tsx`

1.  **Modify `handleDragEnd` Function:**
    * Find the `if (info.offset.x > threshold)` block (right swipe).
    * **Move** the state change *before* the card animation starts.
    * Remove the `setTimeout`.
    * *(Optional but might help)* Add a very short delay to setting `swipeDirection` back to null, just in case.

    **Replace the current right-swipe block logic with this:**

    ```typescript
    // Inside handleDragEnd...
    } else if (info.offset.x > threshold) { // Right swipe logic
      setSwipeDirection("right");
      if (navigator.vibrate) { navigator.vibrate(50); }

      // --- CHANGE: Set modal state *BEFORE* starting card animation ---
      setModalState('calculator');

      // --- THEN, animate card back ---
      cardControls.start({
        x: 0,
        opacity: 1,
        scale: 1,
        transition: { type: "spring", stiffness: 400, damping: 30, duration: 0.4 }
      });

      // Optionally delay resetting swipeDirection slightly
      setTimeout(() => setSwipeDirection(null), 50);
    // ... rest of the function remains the same
    ```
2. Test Different Modal Animation:

If Idea 1 doesn't work, let's try making the modal enter animation simpler or different. Maybe sliding up is less prone to conflicts than scaling/fading from the center during a gesture.

Plaintext

**Goal:** Change the modal's entry/exit animation to see if it avoids iOS glitches.

**File:** `client/src/components/ui/portfolio-impact-calculator.tsx`

1.  **Find** the main wrapping `motion.div` (the one with `className="calculator-modal"`).
2.  **Modify** the `initial`, `animate`, and `exit` props to use a vertical slide instead of scale/y-offset:

    **Replace the existing `initial`, `animate`, `exit` props with:**
    ```typescript
    initial={{ opacity: 0, y: "100vh" }} // Start off-screen bottom
    animate={{ opacity: 1, y: 0, transition: { duration: 0.3, ease: "easeOut" } }}
    exit={{ opacity: 0, y: "100vh", transition: { duration: 0.2, ease: "easeIn" } }}
    ```
    *Note: You might need to adjust the `y` value ("100vh") depending on the visual effect you want.*
3. Final Check - Drastically Simplify Card Animation (Diagnostic):

If it still flickers, let's confirm 100% it's an animation conflict by temporarily disabling the card's animation during the problematic swipe.

Plaintext

**Goal:** Temporarily remove card animation on right-swipe to isolate the modal flicker cause. (Remember to revert this after testing).

**File:** `client/src/components/ui/stock-card.tsx`

1.  **Modify `handleDragEnd` Function:**
    * Find the `if (info.offset.x > threshold)` block (right swipe).
    * **Comment out or delete** the `cardControls.start({...});` block entirely.
    * **Add** `cardControls.set({ x: 0, opacity: 1, scale: 1 });` to instantly reset the card's position without animation.
    * Ensure `setModalState('calculator');` is still called (perhaps with `requestAnimationFrame` for safety).

    **The right-swipe block should look something like this:**
    ```typescript
    // Inside handleDragEnd...
    } else if (info.offset.x > threshold) { // Right swipe logic
      setSwipeDirection("right");
      if (navigator.vibrate) { navigator.vibrate(50); }

      // --- CHANGE: Instantly reset card, no animation ---
      cardControls.set({ x: 0, opacity: 1, scale: 1 });

      // Open modal (maybe slight delay is still good)
      requestAnimationFrame(() => { // Or setTimeout(..., 50)
          setModalState('calculator');
      });

      setSwipeDirection(null);
    // ...
    ```
2.  **Test:** Does the modal now open without flickering, even though the card doesn't animate back smoothly? If yes, the issue is definitively the conflicting animations. If it *still* flickers, the problem is very unusual and might be a deeper Framer Motion or CSS issue.
Recommendation:

Try Idea 1 (Reverse Animation Order) first. If that doesn't solve it, try Idea 2 (Change Modal Animation Type). Use Idea 3 (Drastically Simplify Card Animation) purely as a test to confirm if the conflict exists. Let me know how these tests go!